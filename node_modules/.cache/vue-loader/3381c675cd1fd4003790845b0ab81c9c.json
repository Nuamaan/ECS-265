{"remainingRequest":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Alicia/ECS265/Promise_WebApp/promise/src/views/Contracts.vue?vue&type=style&index=0&id=2ee82057&scoped=true&lang=css&","dependencies":[{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/src/views/Contracts.vue","mtime":1607405339120},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRyYWN0cy1oZWFkaW5nIHsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIGRpc3BsYXk6IGlubGluZTsKfQoucGVuZGluZyB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoKLnNpZ25lZCB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoKLnJlamVjdGVkIHsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9CgoucHJvbWlzZVRpdGxlIHsKICBkaXNwbGF5OiBpbmxpbmU7CiAgbWFyZ2luLWxlZnQ6IDEwcHg7CiAgbWFyZ2luLXRvcDogMTBweDsKICBmbG9hdDpyaWdodDsKfQoKLmNvbnRyYWN0LWxpc3QgewogIC8qIGJvcmRlcjo0cHggc29saWQgIzY4OGVhNjk1OyAqLwogIGJvcmRlci13aWR0aDogMjUlOwogIHRleHQtYWxpZ246IGxlZnQ7CiAgYmFja2dyb3VuZC1jb2xvcjogI0YwRjBGMDsKICBib3JkZXItcmFkaXVzOiA1cHg7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICBwYWRkaW5nOiA1cHggMTBweCA1cHggMTBweDsKICAtbW96LWJveC1zaGFkb3c6IDBweCAwcHggMTVweCAjNWM3Nzg5OwogIC13ZWJraXQtYm94LXNoYWRvdzogMHB4IDBweCAxNXB4ICM1Yzc3ODk7CiAgYm94LXNoYWRvdzogMHB4IDBweCAxNXB4ICM1Yzc3ODk7Cgp9CgoucmVqZWN0LWJ1dHRvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogZGFya3NhbG1vbjsKICAvKiBib3JkZXI6IDFweCBzb2xpZCBibGFjazsgKi8KICBjb2xvcjogcmdiKDQ4LCA0NywgNDcpOwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cgouc2lnbi1idXR0b24gewogIGJhY2tncm91bmQtY29sb3I6IGRhcmtzZWFncmVlbjsKICAvKiBib3JkZXI6IDFweCBzb2xpZCBibGFjazsgKi8KICBjb2xvcjogcmdiKDQ4LCA0NywgNDcpOwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cg=="},{"version":3,"sources":["Contracts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuXA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Contracts.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"contracts\">\n    <my-header></my-header>\n    <h1 class=\"center\">My Contracts</h1><br>\n    <div v-if=\"isDrizzleInitialized\" id=\"app\">\n      <div class=\"pending center\">\n        <h2 class=\"contracts-heading\">Pending Contracts</h2><br><br>\n          <div v-if=\"getAllPendingPromises\">\n\n            <div class=\"contract-list\" v-for=\"(pendingPromiseIndex, i) in getAllPendingPromiseIndices\" v-bind:key=\"i\">\n              <h5 class=\"center\">{{ getAllPendingPromiseTitles[i] }}</h5> \n              {{ getAllPendingPromises[i] }} <br><br>\n              Creator: {{ getAllPendingPromiseBuilders[i] }}<br>\n              Recipient: {{ getAllPendingPromiseRecipients[i] }}<br>\n              <div class=\"center\"><button class=\"sign-button\" v-on:click=\"signPromise(pendingPromiseIndex)\">Sign</button>\n              <button class=\"reject-button\" v-on:click=\"rejectPromise(pendingPromiseIndex)\">Reject</button></div>\n            </div>\n          </div>\n      </div>\n      <div class=\"signed center\">\n        <h2 class=\"contracts-heading\">Signed Contracts</h2><br><br>\n            <div v-if=\"getAllSignedPromises\">\n\n              <div class=\"contract-list\" v-for=\"(signedPromiseTitle, i) in getAllSignedPromiseTitles\" v-bind:key=\"i\">\n                <h5 class=\"center\">{{ getAllSignedPromiseTitles[i] }}</h5> \n                {{ getAllSignedPromises[i] }} <br><br>\n                Creator: {{ getAllSignedPromiseBuilders[i] }}<br>\n                Recipient: {{ getAllSignedPromiseRecipients[i] }}<br>\n              </div>\n\n          </div>\n      </div>\n      <div class=\"rejected center\">\n        <h2 class=\"contracts-heading\">Rejected Contracts</h2><br><br> \n            <div v-if=\"getAllRejectedPromises\">\n\n              <div class=\"contract-list\" v-for=\"(rejectedPromiseTitle, i) in getAllRejectedPromiseTitles\" v-bind:key=\"i\">\n                <h5 class=\"center\">{{ getAllRejectedPromiseTitles[i] }}</h5> \n                {{ getAllRejectedPromises[i] }} <br><br>\n                Creator: {{ getAllRejectedPromiseBuilders[i] }}<br>\n                Recipient: {{ getAllRejectedPromiseRecipients[i] }}<br>\n              </div>\n\n          </div>\n      </div>\n    </div>\n    <div class=\"center-screen\" v-else>\n      Detecting Metamask...\n    </div>\n    <!-- <div class='metamask-info'>\n      <p>Account: {{ web3.coinbase }}</p>\n    </div> -->\n    <my-footer></my-footer>\n  </div>\n</template>\n\n<script>\nimport MyHeader from '../components/Header.vue'\nimport MyFooter from '../components/Footer.vue'\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  name: 'contracts',\n  data () {\n    return {\n \n    }\n  },\n  computed: {\n    // web3 () {\n    //   return this.$store.state.web3\n    // },\n\n    // Use mapGetters to bring in needed methods from the Drizzle plugin\n    ...mapGetters(\"drizzle\", [\"drizzleInstance\", \"isDrizzleInitialized\"]),\n    ...mapGetters(\"accounts\", [\"activeAccount\", \"activeBalance\"]),\n    ...mapGetters(\"contracts\", [\"getContractData\"]),\n    \n\n    /***************Function for Pending Promises************************* */\n    /**\n     *  This function returns the list of pending promises for a single user.\n     *  data contains an array of strings.\n     *  @returns An array of strings that contain Promise details.\n     */\n    getAllPendingPromises() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllPendingPromises\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the titles of the pending promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllPendingPromiseTitles() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllPendingPromiseTitles\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n\n    /**\n     * This function returns the list of the creators of the pending promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllPendingPromiseBuilders() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllPendingPromiseBuilders\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the recipients of the pending promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllPendingPromiseRecipients() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllPendingPromiseRecipients\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the indices of the pending promises for a single user.\n     * @returns An array of integers that contain Promise indices.\n     */\n\n    getAllPendingPromiseIndices() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllPendingPromiseIndices\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /*************************End of Functions for Pending************************************************* */\n\n    /**************************Functions for Signed Promises************************************************ */\n\n    /**\n     *  This function returns the list of signed promises for a single user.\n     *  data contains an array of strings.\n     *  @returns An array of strings that contain Promise details.\n     */\n    getAllSignedPromises() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllSignedPromises\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the titles of the signed promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllSignedPromiseTitles() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllSignedPromiseTitles\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the creators of the signed promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllSignedPromiseBuilders() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllSignedPromiseBuilders\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the recipients of the signed promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllSignedPromiseRecipients() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllSignedPromiseRecipients\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n    /*************************End of Functions for Signed************************************************* */\n\n    /*************************Start of Functions for Rejected********************************************* */\n    \n    /**\n     *  This function returns the list of rejected promises for a single user.\n     *  data contains an array of strings.\n     *  @returns An array of strings that contain Promise details.\n     */\n    getAllRejectedPromises() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllRejectedPromises\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the titles of the rejected promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllRejectedPromiseTitles() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllRejectedPromiseTitles\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the creators of the rejected promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllRejectedPromiseBuilders() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllRejectedPromiseBuilders\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /**\n     * This function returns the list of the recipients of the rejected promises for a single user.\n     * @returns An array of strings that contain Promise titles.\n     */\n\n    getAllRejectedPromiseRecipients() {\n      let data = this.getContractData({\n        contract: \"SolidPromise\",\n        method: \"viewAllRejectedPromiseRecipients\"\n      });\n      if (data === \"loading\") return false;\n      return data;\n    },\n\n    /*************************End of Functions for Rejected************************************************* */\n\n    // Utilities needed to transform bytes to strings\n    utils() {\n      return this.drizzleInstance.web3.utils;\n    }\n  },\n  // Register smart contract before the component mounts to ensure data is available\n  created() {\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllPendingPromises\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllPendingPromiseTitles\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllPendingPromiseBuilders\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllPendingPromiseRecipients\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllSignedPromises\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllSignedPromiseTitles\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllSignedPromiseBuilders\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllSignedPromiseRecipients\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllRejectedPromises\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllRejectedPromiseTitles\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllRejectedPromiseBuilders\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllRejectedPromiseRecipients\",\n      methodArgs: []\n    });\n\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"SolidPromise\",\n      method: \"viewAllPendingPromiseIndices\",\n      methodArgs: []\n    });   \n    \n  },\n  methods: {\n    signPromise(index) {\n      this.drizzleInstance.contracts['SolidPromise'].methods['signPromise'].cacheSend(\n        parseInt(index)\n      )\n    },\n    rejectPromise(index) {\n      this.drizzleInstance.contracts['SolidPromise'].methods['rejectPromise'].cacheSend(\n        parseInt(index)\n      )\n    }\n  },\n  components: { MyHeader, MyFooter }\n}\n</script>\n\n<style scoped>\n.contracts-heading {\n  text-align: left;\n  display: inline;\n}\n.pending {\n  text-align: left;\n}\n\n.signed {\n  text-align: left;\n}\n\n.rejected {\n  text-align: left;\n}\n\n.promiseTitle {\n  display: inline;\n  margin-left: 10px;\n  margin-top: 10px;\n  float:right;\n}\n\n.contract-list {\n  /* border:4px solid #688ea695; */\n  border-width: 25%;\n  text-align: left;\n  background-color: #F0F0F0;\n  border-radius: 5px;\n  margin-bottom: 10px;\n  padding: 5px 10px 5px 10px;\n  -moz-box-shadow: 0px 0px 15px #5c7789;\n  -webkit-box-shadow: 0px 0px 15px #5c7789;\n  box-shadow: 0px 0px 15px #5c7789;\n\n}\n\n.reject-button {\n  background-color: darksalmon;\n  /* border: 1px solid black; */\n  color: rgb(48, 47, 47);\n  font-weight: bold;\n}\n\n.sign-button {\n  background-color: darkseagreen;\n  /* border: 1px solid black; */\n  color: rgb(48, 47, 47);\n  font-weight: bold;\n}\n</style>"]}]}