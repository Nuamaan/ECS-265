{"remainingRequest":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/babel-loader/lib/index.js!/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Alicia/ECS265/Promise_WebApp/promise/src/views/Test.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/src/views/Test.vue","mtime":1606359041587},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Alicia/ECS265/Promise_WebApp/promise/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL0FsaWNpYS9FQ1MyNjUvUHJvbWlzZV9XZWJBcHAvcHJvbWlzZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vIEltcG9ydCBtYXBHZXR0ZXJzIHRvIGFsbG93IGVhc3kgYWNjZXNzIHRvIHRoZSBnZXR0ZXJzIGluIFZ1ZXggYXMgY29tcHV0ZWQgcHJvcGVydGllcwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAidnVleCI7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wdXRlZDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcEdldHRlcnMoImRyaXp6bGUiLCBbImRyaXp6bGVJbnN0YW5jZSIsICJpc0RyaXp6bGVJbml0aWFsaXplZCJdKSksIG1hcEdldHRlcnMoImNvbnRyYWN0cyIsIFsiZ2V0Q29udHJhY3REYXRhIl0pKSwge30sIHsKICAgIC8vIFV0aWxpdGllcyBuZWVkZWQgdG8gdHJhbnNmb3JtIGJ5dGVzIHRvIHN0cmluZ3MKICAgIHV0aWxzOiBmdW5jdGlvbiB1dGlscygpIHsKICAgICAgcmV0dXJuIHRoaXMuZHJpenpsZUluc3RhbmNlLndlYjMudXRpbHM7CiAgICB9CiAgfSksCiAgLy8gUmVnaXN0ZXIgc21hcnQgY29udHJhY3QgYmVmb3JlIHRoZSBjb21wb25lbnQgbW91bnRzIHRvIGVuc3VyZSBkYXRhIGlzIGF2YWlsYWJsZQogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgiZHJpenpsZS9SRUdJU1RFUl9DT05UUkFDVCIsIHsKICAgICAgY29udHJhY3ROYW1lOiAiUHJvbWlzZSIsCiAgICAgIG1ldGhvZDogImFkZFByb21pc2UiLAogICAgICBtZXRob2RBcmdzOiBbXQogICAgfSk7CiAgfQp9Ow=="},{"version":3,"sources":["Test.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,QAAA,gDAEA,UAAA,CAAA,SAAA,EAAA,CAAA,iBAAA,EAAA,sBAAA,CAAA,CAFA,GAGA,UAAA,CAAA,WAAA,EAAA,CAAA,iBAAA,CAAA,CAHA;AAKA;AACA,IAAA,KANA,mBAMA;AACA,aAAA,KAAA,eAAA,CAAA,IAAA,CAAA,KAAA;AACA;AARA,IADA;AAYA;AACA,EAAA,OAbA,qBAaA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,2BAAA,EAAA;AACA,MAAA,YAAA,EAAA,SADA;AAEA,MAAA,MAAA,EAAA,YAFA;AAGA,MAAA,UAAA,EAAA;AAHA,KAAA;AAKA;AAnBA,CAAA","sourcesContent":["<!-- <template>\n <metamask/>\n</template><script> -->\n\n<template>\n  <div v-if=\"isDrizzleInitialized\" id=\"app\">\n    <h1>Start Creating</h1>\n    <drizzle-contract-form\n      contractName=\"Promise\"\n      method=\"addPromise\"\n      :placeholders=\"[]\"\n    />\n  </div>\n  <div v-else>\n    Loading application...\n  </div>\n</template>\n\n<!--\n<script>\nimport Metamask from '../components/Metamask'\nimport { mapGetters } from \"vuex\"\nexport default {\n name: 'test',\n computed: {\n    ...mapGetters(\"drizzle\", [\"drizzleInstance\", \"isDrizzleInitialized\"]),    \n    ...mapGetters(\"contracts\", [\"getContractData\"])\n },\n utils() {\n      return this.drizzleInstance.web3.utils\n    },\n beforeCreate () {\n    console.log('registerWeb3 Action dispatched from Test.vue')\n    this.$store.dispatch('registerWeb3')\n  },\n components: {\n 'metamask': Metamask\n }\n}\n</script>\n-->\n\n<script>\n// Import mapGetters to allow easy access to the getters in Vuex as computed properties\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  computed: {\n    // Use mapGetters to bring in needed methods from the Drizzle plugin\n    ...mapGetters(\"drizzle\", [\"drizzleInstance\", \"isDrizzleInitialized\"]),\n    ...mapGetters(\"contracts\", [\"getContractData\"]),\n\n    // Utilities needed to transform bytes to strings\n    utils() {\n      return this.drizzleInstance.web3.utils;\n    }\n  },\n\n  // Register smart contract before the component mounts to ensure data is available\n  created() {\n    this.$store.dispatch(\"drizzle/REGISTER_CONTRACT\", {\n      contractName: \"Promise\",\n      method: \"addPromise\",\n      methodArgs: []\n    });\n  }\n};\n</script>\n\n<style scoped>\n</style>"],"sourceRoot":"src/views"}]}